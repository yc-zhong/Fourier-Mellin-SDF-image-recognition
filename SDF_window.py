# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SDF_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import cv2 as cv
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QApplication
from PyQt5.QtWidgets import QMainWindow
import numpy as np
from numpy import fft
import matplotlib.pyplot as plt
from scipy import signal

def cv_imread(file_path):
    cv_img = cv.imdecode(np.fromfile(file_path, dtype=np.uint8), 0)
    return cv_img
def normal(data):
    _range = np.max(data) - np.min(data)
    return (data - np.min(data)) / _range

class Ui_SDF_window(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def setupUi(self, SDF_window):
        SDF_window.setObjectName("SDF_window")
        SDF_window.resize(1276, 1000)
        self.centralwidget = QtWidgets.QWidget(SDF_window)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 601, 511))
        self.label.setStyleSheet("image: url(:/新前缀/lightpathjpg.jpg);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.but_target = QtWidgets.QPushButton(self.centralwidget)
        self.but_target.setGeometry(QtCore.QRect(660, 310, 121, 23))
        self.but_target.setObjectName("but_target")
        self.but_SDF = QtWidgets.QPushButton(self.centralwidget)
        self.but_SDF.setGeometry(QtCore.QRect(650, 90, 121, 23))
        self.but_SDF.setObjectName("but_SDF")
        self.label_target = QtWidgets.QLabel(self.centralwidget)
        self.label_target.setGeometry(QtCore.QRect(827, 240, 171, 171))
        self.label_target.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_target.setObjectName("label_target")
        self.label_SDF = QtWidgets.QLabel(self.centralwidget)
        self.label_SDF.setGeometry(QtCore.QRect(830, 20, 171, 171))
        self.label_SDF.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_SDF.setObjectName("label_SDF")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(500, 640, 81, 41))
        self.label_4.setObjectName("label_4")
        self.label_ping = QtWidgets.QLabel(self.centralwidget)
        self.label_ping.setGeometry(QtCore.QRect(620, 580, 271, 271))
        self.label_ping.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_ping.setObjectName("label_ping")
        self.label_CCD = QtWidgets.QLabel(self.centralwidget)
        self.label_CCD.setGeometry(QtCore.QRect(30, 540, 291, 321))
        self.label_CCD.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_CCD.setObjectName("label_CCD")
        self.but_ccd = QtWidgets.QPushButton(self.centralwidget)
        self.but_ccd.setGeometry(QtCore.QRect(110, 880, 101, 31))
        self.but_ccd.setObjectName("but_ccd")
        self.label_ping_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_ping_2.setGeometry(QtCore.QRect(940, 580, 271, 271))
        self.label_ping_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_ping_2.setObjectName("label_ping_2")
        self.but_result = QtWidgets.QPushButton(self.centralwidget)
        self.but_result.setGeometry(QtCore.QRect(420, 690, 171, 41))
        self.but_result.setObjectName("but_result")
        SDF_window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(SDF_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1276, 22))
        self.menubar.setObjectName("menubar")
        SDF_window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(SDF_window)
        self.statusbar.setObjectName("statusbar")
        SDF_window.setStatusBar(self.statusbar)

        self.retranslateUi(SDF_window)
        QtCore.QMetaObject.connectSlotsByName(SDF_window)
        global path_SDF
        global path_target
        global path_ccd
        global path_result
        #path_SDF = ''
        #path_target = ''
        #path_ccd = 'ccd.png'
        #path_result = ''
        self.but_SDF.clicked.connect(self.openimg_SDF)
        self.but_target.clicked.connect(self.openimg_target)
        self.but_ccd.clicked.connect(self.CCD)
        self.but_result.clicked.connect(self.ping)

    def retranslateUi(self, SDF_window):
        _translate = QtCore.QCoreApplication.translate
        SDF_window.setWindowTitle(_translate("SDF_window", "图像识别"))
        self.but_target.setText(_translate("SDF_window", "放置待识别物"))
        self.but_SDF.setText(_translate("SDF_window", "放置SDF"))
        self.label_target.setText(_translate("SDF_window", "待识别物"))
        self.label_SDF.setText(_translate("SDF_window", "SDF"))
        self.label_4.setText(_translate("SDF_window", "相关输出："))
        self.label_ping.setText(_translate("SDF_window", "相关输出"))
        self.label_CCD.setText(_translate("SDF_window", "CCD影像"))
        self.but_ccd.setText(_translate("SDF_window", "刷新CCD"))
        self.label_ping_2.setText(_translate("SDF_window", "模拟结果"))
        self.but_result.setText(_translate("SDF_window", "刷新白屏并保存图片"))



    def openimg_SDF(self):
        global path_SDF  # 样本图片的地址
        path_SDF, imgType = QFileDialog.getOpenFileName(self.centralwidget, "输入样本",
                                                        "D:\南大\大二下\实验\拓展\软件",
                                                        "*.png;;*.jpg;;All Files(*)")
        img = QtGui.QPixmap(path_SDF).scaled(self.label_SDF.width(), self.label_SDF.height())
        # 在label控件上显示选择的图片
        self.label_SDF.setPixmap(img)

    def openimg_target(self):
        global path_target  # 样本图片的地址
        path_target, imgType = QFileDialog.getOpenFileName(self.centralwidget, "输入样本",
                                                           "D:\南大\大二下\实验\拓展\软件",
                                                           "*.png;;*.jpg;;All Files(*)")
        img = QtGui.QPixmap(path_target).scaled(self.label_target.width(), self.label_target.height())
        # 在label控件上显示选择的图片
        self.label_target.setPixmap(img)


    def CCD(self):
        global path_ccd

        if path_target and path_SDF:
            img1ccd = cv_imread(path_SDF)
            img2ccd = cv_imread(path_target)
            (h, w) = img1ccd.shape[:2]
            G1 = fft.fftshift(fft.fft2(img1ccd))
            # G1 *= prepareHighPassFilter(G1)
            G2 = fft.fftshift(fft.fft2(img2ccd))
            # G2 *= prepareHighPassFilter(G2)
            k = 1.0j * 2 * np.pi * 1e9 / 700 / 0.2 * 1e-3
            x = np.arange(w)
            y = np.arange(h)
            x, y = np.meshgrid(x, y)
            imgh = abs(G1 * np.exp(k * x) + G2 * np.exp(-k * x)) ** 2
            b, a = signal.butter(8, 0.1, 'highpass')
            imgh = signal.filtfilt(b, a, imgh)
            imgh = normal(imgh)*255
            # img为CCD上的图像
            imgh = imgh.astype(np.uint8) #有问题
            imgh = 255-cv.equalizeHist(imgh)
            cv.imwrite('ccd.png', imgh)
            path_ccd = 'ccd.png'
            imageh = QtGui.QPixmap(path_ccd).scaled(self.label_CCD.width(), self.label_CCD.height())
            self.label_CCD.setPixmap(imageh)
        else:
            print('path_target or path_SDF not found!')
            pass
        
    def ping(self):
        if path_ccd:
            fre = cv_imread(path_ccd)
            #以下是滤波操作
            (h, w) = fre.shape[:2]
            center = (w // 2, h // 2)
            mask=np.ones((h,w),dtype=np.uint8)
            mask[center[1]-50:center[1]+50,center[0]-50:center[0]+50]=0
            fre = np.fft.fft2(mask*np.fft.fftshift(np.fft.fft2(fre)))  
            #滤波结束
            result = abs(fft.fft2(fre)) ** 2
            m = np.argmax(result)
            r, c = divmod(m, result.shape[1])
            """ result=normal(result)*255
            result=result.astype(np.uint8) """

            cv.imwrite('result.png', result)
            path_result = 'result.png'
            imager = QtGui.QPixmap(path_result).scaled(self.label_ping.width(), self.label_ping.height())
            self.label_ping.setPixmap(imager)
            fig=plt.figure()
            ax = fig.gca(projection='3d')
            (h, w) = result.shape[:2]

            x, y = np.meshgrid(np.arange(h), np.arange(w))

            surf = ax.plot_surface(x, y, result, cmap=cm.coolwarm)  # 绘制傅里叶功率谱的立体图
            plt.savefig('result_3D.png')
            imager3 = QtGui.QPixmap('result_3D.png').scaled(self.label_ping_2.width(), self.label_ping_2.height())
            self.label_ping_2.setPixmap(imager3)
            print(r, c)
        else:
            print('ccd.png not found!')
            pass



import lightpathziyuan_rc
import sys

'''if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()  # 创建窗体类对象--窗口类型对象
    ui = Ui_SDF_window()  # 创建PyQT设计的窗体对象--该类用于初始化任何类型的窗口设置
    ui.setupUi(MainWindow)  # 初始化MainWindow窗口设置
    MainWindow.show()  # 显示窗口
    sys.exit(app.exec_())'''