# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import numpy as np
from numpy import fft
import matplotlib.pyplot as plt
from scipy import signal
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QApplication
import jiantouziyuan_rc
import cv2 as cv
from PyQt5.QtWidgets import QMainWindow

def cv_imread(file_path):
    cv_img = cv.imdecode(np.fromfile(file_path, dtype=np.uint8), 0)
    return cv_img

class Ui_MF(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
    def setupUi(self, MF):
        MF.setObjectName("MF")
        MF.resize(800, 600)
        MF.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MF)
        self.centralwidget.setObjectName("centralwidget")
        self.but_sample = QtWidgets.QPushButton(self.centralwidget)
        self.but_sample.setGeometry(QtCore.QRect(50, 190, 171, 23))
        self.but_sample.setStyleSheet("gridline-color: rgb(255, 255, 255);")
        self.but_sample.setObjectName("but_sample")
        self.label_sample = QtWidgets.QLabel(self.centralwidget)
        self.label_sample.setGeometry(QtCore.QRect(50, 10, 141, 141))
        self.label_sample.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_sample.setObjectName("label_sample")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(50, 220, 171, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.label_target = QtWidgets.QLabel(self.centralwidget)
        self.label_target.setGeometry(QtCore.QRect(50, 280, 141, 141))
        self.label_target.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_target.setObjectName("label_target")
        self.but_target = QtWidgets.QPushButton(self.centralwidget)
        self.but_target.setGeometry(QtCore.QRect(50, 450, 171, 23))
        self.but_target.setStyleSheet("gridline-color: rgb(255, 255, 255);")
        self.but_target.setObjectName("but_target")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(50, 490, 171, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(270, 230, 61, 51))
        self.label.setStyleSheet("image: url(:/jiantou/jiantou.jpg);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_result = QtWidgets.QLabel(self.centralwidget)
        self.label_result.setGeometry(QtCore.QRect(370, 180, 141, 141))
        self.label_result.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_result.setObjectName("label_result")
        self.but_save = QtWidgets.QPushButton(self.centralwidget)
        self.but_save.setGeometry(QtCore.QRect(370, 380, 181, 23))
        self.but_save.setStyleSheet("gridline-color: rgb(255, 255, 255);")
        self.but_save.setObjectName("but_save")
        self.lineEdit_change = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_change.setGeometry(QtCore.QRect(400, 350, 351, 20))
        self.lineEdit_change.setObjectName("lineEdit_change")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(310, 350, 81, 21))
        self.label_2.setObjectName("label_2")
        MF.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MF)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MF.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MF)
        self.statusbar.setObjectName("statusbar")
        MF.setStatusBar(self.statusbar)

        self.retranslateUi(MF)
        QtCore.QMetaObject.connectSlotsByName(MF)
        self.but_sample.clicked.connect(self.openimg_sample)
        self.but_target.clicked.connect(self.openimg_target)
        self.but_save.clicked.connect(self.MF)


    def retranslateUi(self, MF):
        _translate = QtCore.QCoreApplication.translate
        MF.setWindowTitle(_translate("MF", "傅里叶梅林变换"))
        self.but_sample.setText(_translate("MF", "选择图片"))
        self.label_sample.setText(_translate("MF", "样本图片"))
        self.label_target.setText(_translate("MF", "待识别物的图片"))
        self.but_target.setText(_translate("MF", "选择图片"))
        self.label_result.setText(_translate("MF", "调整后的待识别物"))
        self.but_save.setText(_translate("MF", "生成并保存图片"))
        self.label_2.setText(_translate("MF", "调整幅度："))
    def openimg_sample(self):
        global path_sample  # 样本图片的地址
        path_sample, imgType = QFileDialog.getOpenFileName(self.centralwidget, "输入样本",
                                                            "D:\南大\大二下\实验\拓展\软件",
                                                            "*.png;;*.jpg;;All Files(*)")
        img = QtGui.QPixmap(path_sample).scaled(self.label_sample.width(), self.label_sample.height())
        # 在label控件上显示选择的图片
        self.label_sample.setPixmap(img)
        # 显示所选图片的路径
        self.lineEdit.setText(path_sample)
    def openimg_target(self):
        global path_target  # 样本图片的地址
        path_target, imgType = QFileDialog.getOpenFileName(self.centralwidget, "输入样本",
                                                            "D:\南大\大二下\实验\拓展\软件",
                                                            "*.png;;*.jpg;;All Files(*)")
        img = QtGui.QPixmap(path_target).scaled(self.label_target.width(), self.label_target.height())
        # 在label控件上显示选择的图片
        self.label_target.setPixmap(img)
        # 显示所选图片的路径
        self.lineEdit_2.setText(path_target)
    def MF(self):
        global h, w, M
        def hann2D(h, w):
            P = np.ones((h, w))
            for i in range(w):
                P[:, i] *= signal.windows.hann(h)
            for j in range(h):
                P[j, :] *= signal.windows.hann(w)
            return P

        def phase_correlate(img1, img2):
            global h, w
            img1F = fft.fftshift(fft.fft2(img1))
            img2F = fft.fftshift(fft.fft2(img2))
            # img1F *= prepareHighPassFilter(img1F)
            # img2F *= prepareHighPassFilter(img2F)
            result = fft.ifftshift(fft.ifft2(img1F * np.conjugate(img2F) / abs(img1F * img2F)))
            b, a = signal.butter(8, 0.1, 'highpass', analog=True)
            result = signal.filtfilt(b, a, result)
            return abs(result)

        def PolarToCar(img):
            (h, w) = img.shape[:2]
            center = (w, h)
            phi_step = 2 * np.pi / w
            new = np.ones((h * 2, w * 2))
            for i in range(h * 2):
                x = i - center[1]
                for j in range(w * 2):
                    y = j - center[0]
                    r = int(np.sqrt(x ** 2 + y ** 2))
                    if r != 0:
                        phi = int(np.arccos(y / np.sqrt(x ** 2 + y ** 2)) / phi_step)
                    else:
                        phi = 0
                    if 0 <= r < h and phi < w:
                        new[i, j] = img[r, phi]
            return new

        def prepareHighPassFilter(img, mode='cos'):
            if mode == 'cos':
                pi2 = np.pi / 2.0
                rows = np.cos(np.linspace(0, pi2, img.shape[0] // 2))
                rows = (1 - rows) * (2 - rows)
                rows = np.tile(rows, (img.shape[0] // 2, 1)).T
                filter = PolarToCar(rows)
                return filter
            elif mode == 'root':
                rows = np.linspace(-1, 1, img.shape[0])
                cols = np.linspace(-1, 1, img.shape[1])
                rows = np.cbrt(rows)
                cols = np.cbrt(cols)
                x = np.outer(rows, cols)
                return x * x

        def CarToLogPolar(img):
            global h, w
            center = (w // 2, h // 2)
            r_max = np.log(h / 2)
            r_step = r_max / h
            phi_step = 2 * np.pi / w
            img_new = np.zeros((h, w))
            for i in range(h):
                real_Radius = np.exp(i * r_step)
                for j in range(w):
                    row = int(center[1] + real_Radius * np.sin(j * phi_step))
                    col = int(center[0] + real_Radius * np.cos(j * phi_step))
                    if 0 <= row < h and 0 <= col < w:
                        img_new[j, i] = img[row, col]
            return img_new

        def MellinFourier(img, mode='cos'):
            global M, w, h
            # center = (w//2,h//2)
            img = img * hann2D(h, w)
            img_F = abs(fft.fftshift(fft.fft2(img)))  # 先做一次傅里叶变换
            img_F = cv.Laplacian(img_F, cv.CV_32F, ksize=11)
            Filter = prepareHighPassFilter(img_F, mode=mode)
            img_F *= Filter  # 进行高通滤波
            img2 = CarToLogPolar(img_F)
            # img2 = cv.logPolar(img, center, M, cv.WARP_FILL_OUTLIERS)
            # result = fft.fftshift(np.fft.fft2(img2))  #再做一次梅林变换（映射到对数极坐标再傅里叶变换）
            return img_F, img2

        def LambdaTheta(img1, img2):
            global h, w, M
            r_max = np.log(h / 2)
            r_step = r_max / h
            phi_step = 360 / w
            COR = phase_correlate(img1, img2)
            '''COR = cv.phaseCorrelate(img1, img2)
            print(COR)
            (r, c) = COR[0]'''
            m = np.argmax(COR)
            r, c = divmod(m, COR.shape[1])
            r0 = -r + h // 2
            c0 = c - w // 2
            l = np.exp(c0 * r_step)
            theta = r0 * phi_step
            '''if theta < - 90:
                theta += 180
            elif theta > 90.0:
                theta -= 180'''
            return COR, l, theta, r, c
        def change(theta,l,img):
            return 0
        M=40
        img1 = cv_imread(path_sample)
        img2 = cv_imread(path_target)
        (h, w) = img1.shape[:2]
        img1_F, img1 = MellinFourier(img1)
        img2_F, img2 = MellinFourier(img2)
        COR, l, theta, r, c = LambdaTheta(img1, img2)
        print(1.0/l, theta)
        s='旋转角度:'+str(theta)+'度,缩放大小:'+str(1.0/l)
        self.lineEdit_change.setText(s)
        rotation=theta
        img2 = cv_imread(path_target)
        height, width = img2.shape[:2]
        center = (width // 2, height // 2)

        # 得到旋转矩阵，第一个参数为旋转中心，第二个参数为旋转角度，第三个参数为旋转之前原图像缩放比例
        M = cv.getRotationMatrix2D(center, rotation, 1.0/l)
        # 进行仿射变换，第一个参数图像，第二个参数是旋转矩阵，第三个参数是变换之后的图像大小
        image_rotation = cv.warpAffine(img2, M, (width, height))
        fpath, ftype = QFileDialog.getSaveFileName(self.centralwidget, "生成结果", "D:\\", "*.png;;*.jpg;;All Files(*)")


        cv.imencode('.png', image_rotation)[1].tofile(fpath)

        img22 = QtGui.QPixmap(fpath).scaled(self.label_target.width(), self.label_target.height())
        # 在label控件上显示选择的图片

        self.label_result.setPixmap(img22)

'''if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()    # 创建窗体类对象--窗口类型对象
    ui = Ui_MF()                    # 创建PyQT设计的窗体对象--该类用于初始化任何类型的窗口设置
    ui.setupUi(MainWindow)                  # 初始化MainWindow窗口设置
    MainWindow.show()                       # 显示窗口
    sys.exit(app.exec_())'''