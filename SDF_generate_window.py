# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SDF_generate_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2 as cv
from PyQt5.QtWidgets import QFileDialog, QApplication
from PyQt5.QtWidgets import QMainWindow
import numpy as np
from numpy import fft
import matplotlib.pyplot as plt
from scipy import signal


def cv_imread(file_path):
    cv_img = cv.imdecode(np.fromfile(file_path, dtype=np.uint8), 0)
    return cv_img

createVar=locals()
varlist=[]
class Ui_SDF_generate(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
    def setupUi(self, SDF_generate):
        SDF_generate.setObjectName("SDF_generate")
        SDF_generate.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(SDF_generate)
        self.centralwidget.setObjectName("centralwidget")
        self.label_sdf = QtWidgets.QLabel(self.centralwidget)
        self.label_sdf.setGeometry(QtCore.QRect(300, 90, 281, 281))
        self.label_sdf.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_sdf.setObjectName("label_sdf")
        self.but_dir = QtWidgets.QPushButton(self.centralwidget)
        self.but_dir.setGeometry(QtCore.QRect(60, 150, 161, 41))
        self.but_dir.setObjectName("but_dir")
        self.but_sdf_gen = QtWidgets.QPushButton(self.centralwidget)
        self.but_sdf_gen.setGeometry(QtCore.QRect(350, 420, 171, 31))
        self.but_sdf_gen.setObjectName("but_sdf_gen")
        self.lineEdit_dir = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_dir.setGeometry(QtCore.QRect(60, 230, 161, 20))
        self.lineEdit_dir.setObjectName("lineEdit_dir")
        SDF_generate.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(SDF_generate)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menuSDF = QtWidgets.QMenu(self.menubar)
        self.menuSDF.setObjectName("menuSDF")
        SDF_generate.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(SDF_generate)
        self.statusbar.setObjectName("statusbar")
        SDF_generate.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuSDF.menuAction())

        global path_dir

        self.retranslateUi(SDF_generate)
        QtCore.QMetaObject.connectSlotsByName(SDF_generate)
        self.but_dir.clicked.connect(self.opendir)
        self.but_sdf_gen.clicked.connect(self.SDF_generate)


    def retranslateUi(self, SDF_generate):
            _translate = QtCore.QCoreApplication.translate
            SDF_generate.setWindowTitle(_translate("SDF_generate", "SDF训练器"))
            self.label_sdf.setText(_translate("SDF_generate", "SDF"))
            self.but_dir.setText(_translate("SDF_generate", "选择图片目录"))
            self.but_sdf_gen.setText(_translate("SDF_generate", "生成并保存SDF"))
            self.menuSDF.setTitle(_translate("SDF_generate", "SDF"))
    def opendir(self):
        global path_dir
        try:
            path_dir = QFileDialog.getExistingDirectory(None, '选择路径', os.getcwd())
            self.lineEdit_dir.setText(path_dir)
        except Exception as e:
            print(e)
    def SDF_generate(self):
        list = os.listdir(path_dir)
        print(list,len(list))

        def train_SDF(imglist):
            N = len(imglist)

            P = np.zeros((N, N))
            g = []
            for i in range(N):
                g.append(np.fft.fftshift(np.fft.fft(imglist[i])))
            for i in range(N):
                for j in range(N):
                    P[i][j] = np.max(abs(np.fft.ifft2(np.conjugate(g[i]) * g[j])))
            c = np.ones(N) # 不一定全是1
            train = np.dot(np.linalg.inv(P), c)
            train = train / np.sum(train)
            print(train)
            (h, w) = imglist[0].shape[:2]
            SDF = np.zeros((h, w), dtype=float)
            for i in range(N):
                SDF += train[i] * imglist[i]
            return SDF
        
        imglist=[]
        for i in range(len(list)):
            name=path_dir+'/'+list[i]
            img=cv_imread(name)
            imglist.append(img)

        SDF=train_SDF(imglist)
        fpath, ftype = QFileDialog.getSaveFileName(self.centralwidget, "生成结果", "D:\\", "*.png;;*.jpg;;All Files(*)")
        cv.imencode('.png', SDF)[1].tofile(fpath)
        img2 = QtGui.QPixmap(fpath).scaled(self.label_sdf.width(), self.label_sdf.height())
        # 在label控件上显示选择的图片

        self.label_sdf.setPixmap(img2)


import sys
'''if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()  # 创建窗体类对象--窗口类型对象
    ui = Ui_SDF_generate()  # 创建PyQT设计的窗体对象--该类用于初始化任何类型的窗口设置
    ui.setupUi(MainWindow)  # 初始化MainWindow窗口设置
    MainWindow.show()  # 显示窗口
    sys.exit(app.exec_())'''